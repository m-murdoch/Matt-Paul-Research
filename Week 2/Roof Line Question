The Roofline Model has a flat portion and an oblique portion. Where a kernel falls on the line tells us information about how the program can be optimized.

Moving a kernel left represents a decrease in floating point operations per byte (operational intensity), while moving a kernel left represents an increase in operational intensity. This is done with memory management optimization within the cache and pertains to cache size and prefetching. If the kernel is under the flat roof moving left takes it closer to a memory bound problem, and right takes it further away from the optimal intensity. If the kernel is under the oblique roof moving right increases the performance of the program taking it closer to the flat “ceiling” of performance. Moving the kernel left under the oblique roof means lowering the memory bandwidth and decreasing the performance.

Moving the kernel up represents increasing attainable floating-point performance through computational optimization. This is done through floating point operation balance and adding ILP/SMID code. Under both the flat and the oblique part of the roof, moving upward can encounter both memory and computational ceilings; however, under the flat part, if the kernel is far from the ridge point it is more likely to reach a computational roof. Under the oblique part, far from the ridge point, it is more likely to experience a memory roof.
