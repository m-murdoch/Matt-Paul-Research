Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: OSP(long, int *, int **)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at OSP.c(127,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at OSP.c(127,2)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at OSP.c(141,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at OSP.c(141,3)
<Remainder>
LOOP END

LOOP BEGIN at OSP.c(145,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between Main[1][c1+1] (147:5) and Main[c1+N][N] (173:5)

   LOOP BEGIN at OSP.c(148,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between Main[c2+1][c1+c2+1] (150:7) and Main[N-c1-c3][c3+N] (153:9)

      LOOP BEGIN at OSP.c(151,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at OSP.c(156,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between Main[c2+1][c1+c2+1] (158:7) and Main[N-c1-c3][c3+N] (161:9)

      LOOP BEGIN at OSP.c(159,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at OSP.c(165,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between C[N-c1-c3][c2] (169:9) and C[c1+c2][c2] (171:7)

      LOOP BEGIN at OSP.c(167,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at OSP.c(178,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between Main[c2+1][(N-1)/2+c2+1] (180:7) and Main[N-(N-1)/2-c3][c3+N] (183:9)

   LOOP BEGIN at OSP.c(181,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between Main[N-(N-1)/2-c3][c3+N] (183:9) and Main[N-(N-1)/2-c3][c3+N] (183:9)
   LOOP END
LOOP END

LOOP BEGIN at OSP.c(186,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between C[N-(N-1)/2-c3][c2] (190:9) and C[(N-1)/2+c2][c2] (192:7)

   LOOP BEGIN at OSP.c(188,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between Main[N-(N-1)/2-c3][c3+N] (190:9) and Main[N-(N-1)/2-c3][c3+N] (190:9)
   LOOP END
LOOP END

LOOP BEGIN at OSP.c(197,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between Main[1][c1+1] (199:5) and Main[c1+N][N] (223:5)

   LOOP BEGIN at OSP.c(200,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between Main[c2+1][c1+c2+1] (202:7) and Main[N-c1-c3][c3+N] (205:9)

      LOOP BEGIN at OSP.c(203,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at OSP.c(208,5)
   <Distributed chunk1>
      remark #25426: Loop Distributed (2 way) 
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between Main[N-c1-c3][c3+N] (212:9) and Main[N-c1-c3][c3+N] (212:9)

      LOOP BEGIN at OSP.c(210,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at OSP.c(208,5)
   <Distributed chunk2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25439: unrolled with remainder by 8  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25457: Number of partial sums replaced: 1
   LOOP END

   LOOP BEGIN at OSP.c(215,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between C[N-c1-c3][c2] (219:9) and C[c1+c2][c2] (221:7)

      LOOP BEGIN at OSP.c(217,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at OSP.c(208,5)
   <Remainder, Distributed chunk2>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

LOOP BEGIN at OSP.c(226,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between *(*(Main+8)+N*4) (228:5) and *(*(Main+8)+N*4) (228:5)
   remark #25439: unrolled with remainder by 4  
LOOP END

LOOP BEGIN at OSP.c(226,3)
<Remainder>
LOOP END
===========================================================================
