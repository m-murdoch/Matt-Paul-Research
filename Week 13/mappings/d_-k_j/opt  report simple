Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: OSP(long, int *, int **)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at OSP.c(127,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at OSP.c(127,2)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at OSP.c(141,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at OSP.c(141,3)
<Remainder>
LOOP END

LOOP BEGIN at OSP.c(145,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between C[1][c1+1] (147:5) and C[c2+1][c1+c2+1] (164:7)

   LOOP BEGIN at OSP.c(148,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between C[c1+c3][c2+c3] (152:9) and C[c2+1][c1+c2+1] (154:7)

      LOOP BEGIN at OSP.c(150,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at OSP.c(156,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at OSP.c(161,5)
      remark #25427: Loop Statements Reordered
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at OSP.c(161,5)
   <Remainder>
   LOOP END

   LOOP BEGIN at OSP.c(166,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at OSP.c(166,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at OSP.c(177,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at OSP.c(188,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between C[(N-1)/2+c3][c2+c3] (192:11) and C[c2+1][(N-1)/2+c2+1] (194:9)

   LOOP BEGIN at OSP.c(190,9)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at OSP.c(196,9)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at OSP.c(201,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at OSP.c(207,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at OSP.c(215,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between C[1][c1+1] (217:5) and C[c1+c3][c2+c3] (241:9)

   LOOP BEGIN at OSP.c(218,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between C[c1+c3][c2+c3] (222:9) and C[c2+1][c1+c2+1] (224:7)

      LOOP BEGIN at OSP.c(220,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at OSP.c(226,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at OSP.c(231,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at OSP.c(237,5)
   <Distributed chunk1>
      remark #25426: Loop Distributed (2 way) 
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between Main[c1+c3][c3] (241:9) and Main[c1+c3][c3] (241:9)

      LOOP BEGIN at OSP.c(239,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at OSP.c(237,5)
   <Distributed chunk2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25439: unrolled with remainder by 8  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25457: Number of partial sums replaced: 1
   LOOP END

   LOOP BEGIN at OSP.c(244,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at OSP.c(244,5)
   <Remainder>
   LOOP END

   LOOP BEGIN at OSP.c(237,5)
   <Remainder, Distributed chunk2>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

LOOP BEGIN at OSP.c(255,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between Main[N-2+c3][c3] (259:9) and Main[N-2+c3][c3] (259:9)

   LOOP BEGIN at OSP.c(257,7)
      remark #25436: completely unrolled by 2   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at OSP.c(262,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at OSP.c(269,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
LOOP END

LOOP BEGIN at OSP.c(269,3)
<Remainder>
LOOP END
===========================================================================
