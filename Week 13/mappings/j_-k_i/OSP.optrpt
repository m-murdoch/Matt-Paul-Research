Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.3.199 Build 20190206

Compiler options: -I/usr/include/malloc/ -o OSP.o -O3 -std=c99 -qopt-report-phase=vec,loop -qopt-report=5 -lm -c

Begin optimization report for: OSP(long, int *, int **)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at OSP.c(127,2)
   remark #15389: vectorization support: reference Main[mz1] has unaligned access   [ OSP.c(128,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.070
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 12.500 
   remark #15478: estimated potential speedup: 0.560 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at OSP.c(127,2)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at OSP.c(146,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between C[c1][c1] (152:5) and C[1][c1] (165:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between C[1][c1] (165:5) and C[c1][c1] (152:5)

   LOOP BEGIN at OSP.c(148,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <Main[c3+N]>, stride is -1   [ OSP.c(150,7) ]
      remark #15329: vectorization support: indirect store was emulated for the variable <Main[c3+N][c1]>, 64-bit indexed, part of address is read from memory   [ OSP.c(150,7) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.014
      remark #15452: unmasked strided loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 18.000 
      remark #15478: estimated potential speedup: 0.500 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at OSP.c(148,5)
   <Remainder>
   LOOP END

   LOOP BEGIN at OSP.c(153,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between Main[c3+N][c1] (155:7) and Main[c3+N][c1] (155:7)
      remark #15346: vector dependence: assumed ANTI dependence between Main[c3+N][c1] (155:7) and Main[c3+N][c1] (155:7)
   LOOP END

   LOOP BEGIN at OSP.c(157,5)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between C[c1-c2+1][c1] (159:7) and C[c3+N][c1-c2] (162:9)
      remark #15346: vector dependence: assumed ANTI dependence between C[c3+N][c1-c2] (162:9) and C[c1-c2+1][c1] (159:7)

      LOOP BEGIN at OSP.c(160,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <Main[c3+N]>, stride is -1   [ OSP.c(162,9) ]
         remark #15329: vectorization support: indirect store was emulated for the variable <Main[c3+N][c1]>, 64-bit indexed, part of address is read from memory   [ OSP.c(162,9) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <C[c3+N]>, stride is -1   [ OSP.c(162,9) ]
         remark #15328: vectorization support: indirect load was emulated for the variable <C[c3+N][c1-c2]>, 64-bit indexed, part of address is read from memory   [ OSP.c(162,9) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <M[c3+N-1]>, stride is -1   [ OSP.c(162,9) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <Main[c3+N]>, stride is -1   [ OSP.c(162,9) ]
         remark #15328: vectorization support: indirect load was emulated for the variable <Main[c3+N][c1]>, 64-bit indexed, part of address is read from memory   [ OSP.c(162,9) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.036
         remark #15452: unmasked strided loads: 4 
         remark #15462: unmasked indexed (or gather) loads: 2 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 40 
         remark #15477: vector cost: 70.000 
         remark #15478: estimated potential speedup: 0.570 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END
===========================================================================
