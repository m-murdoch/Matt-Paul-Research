prog = ReadAlphabets("OSP.ab");
system = "OSP";
outDir = "../mappings/";

CheckProgram(prog);
AShow(prog, system);

## Space time maps that "permute the k dimension"

## Now for the  time maps that "permute the k dimension"
## For this we first do some preprocessing that "isolates"
## the reduction expression.  It introduces a new variable
## and remanes it to Main

NormalizeReduction(prog, system, "C");
RenameVariable(prog, system, "NR_C", "Main");
Normalize(prog);
CheckProgram(prog);

###### ROWS/COLUMNS ######
##---- 1 2 3 ----##

# i,j,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->i,j,k)", "(i,j->i,j,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->i,j,j)");
#generateScheduledCode(prog, system, outDir+"/i_j_k");

# i,j,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->i,j,j-k)", "(i,j->i,j,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->i,j,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/i_j_-k");

# i,-j,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->i,N-j,k)", "(i,j->i,N-j,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->i,N-j,j)");
#generateScheduledCode(prog, system, outDir+"/i_-j_k");

# i,-j,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->i,N-j,j-k)", "(i,j->i,N-j,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->i,N-j,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/i_-j_-k");

# -i,j,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-i,j,k)", "(i,j->N-i,j,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-i,j,j)");
#generateScheduledCode(prog, system, outDir+"/-i_j_k");

# -i,j,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-i,j,j-k)", "(i,j->N-i,j,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-i,j,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/-i_j_-k");

# -i,-j,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-i,N-j,k)", "(i,j->N-i,N-j,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-i,N-j,j)");
#generateScheduledCode(prog, system, outDir+"/-i_-j_k");

# -i,-j,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-i,N-j,j-k)", "(i,j->N-i,N-j,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-i,N-j,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/-i_-j_-k");

# i,k,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->i,k,j)", "(i,j->i,i-1,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->i,j,j)");
#generateScheduledCode(prog, system, outDir+"/i_k_j");

# i,-k,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->i,j-k,j)", "(i,j->i,0,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->i,j-i+1,j)");
#generateScheduledCode(prog, system, outDir+"/i_-k_j");

# i,k,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->i,k,N-j)", "(i,j->i,i-1,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->i,j,N-j)");
#generateScheduledCode(prog, system, outDir+"/i_k_-j");

# i,-k,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->i,j-k,N-j)", "(i,j->i,0,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->i,j-i+1,N-j)");
#generateScheduledCode(prog, system, outDir+"/i_-k_-j");

# -i,k,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-i,k,j)", "(i,j->N-i,i-1,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-i,j,j)");
#generateScheduledCode(prog, system, outDir+"/-i_k_j");

# -i,-k,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-i,j-k,j)", "(i,j->N-i,0,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-i,j-i+1,j)");
#generateScheduledCode(prog, system, outDir+"/-i_-k_j");

# -i,k,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-i,k,N-j)", "(i,j->N-i,i-1,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-i,j,N-j)");
#generateScheduledCode(prog, system, outDir+"/-i_k_-j");

# -i,-k,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-i,j-k,N-j)", "(i,j->N-i,0,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-i,j-i+1,N-j)");
#generateScheduledCode(prog, system, outDir+"/-i_-k_-j");

# j,i,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,i,k)", "(i,j->j,i,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,i,j)");
#generateScheduledCode(prog, system, outDir+"/j_i_k");

# j,i,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,i,j-k)", "(i,j->j,i,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,i,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/j_i_-k");

# -j,i,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,i,k)", "(i,j->N-j,i,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,i,j)");
#generateScheduledCode(prog, system, outDir+"/-j_i_k");

# -j,i,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,i,j-k)", "(i,j->N-j,i,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,i,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/-j_i_-k");

# j,-i,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,N-i,k)", "(i,j->j,N-i,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,N-i,j)");
#generateScheduledCode(prog, system, outDir+"/j_-i_k");

# j,-i,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,N-i,j-k)", "(i,j->j,N-i,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,N-i,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/j_-i_-k");

# -j,-i,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,N-i,k)", "(i,j->N-j,N-i,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,N-i,j)");
#generateScheduledCode(prog, system, outDir+"/-j_-i_k");

# -j,-i,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,N-i,j-k)", "(i,j->N-j,N-i,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,N-i,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/-j_-i_-k");

# j,k,i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,k,i)", "(i,j->j,i-1,i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j,i)");
#generateScheduledCode(prog, system, outDir+"/j_k_i");

# j,-k,i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,j-k,i)", "(i,j->j,0,i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j-i+1,i)");
#generateScheduledCode(prog, system, outDir+"/j_-k_i");

# -j,k,i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,k,i)", "(i,j->N-j,i-1,i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,j,i)");
#generateScheduledCode(prog, system, outDir+"/-j_k_i");

# -j,-k,i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,j-k,i)", "(i,j->N-j,0,i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,j-i+1,i)");
#generateScheduledCode(prog, system, outDir+"/-j_-k_i");

# j,k,-i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,k,N-i)", "(i,j->j,i-1,N-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j,N-i)");
#generateScheduledCode(prog, system, outDir+"/j_k_-i");

# j,-k,-i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,j-k,N-i)", "(i,j->j,0,N-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j-i+1,N-i)");
#generateScheduledCode(prog, system, outDir+"/j_-k_-i");

# -j,k,-i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,k,N-i)", "(i,j->N-j,i-1,N-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,j,N-i)");
#generateScheduledCode(prog, system, outDir+"/-j_k_-i");

# -j,-k,-i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,j-k,N-i)", "(i,j->N-j,0,N-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,j-i+1,N-i)");
#generateScheduledCode(prog, system, outDir+"/-j_-k_-i");

# k,i,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,i,j)", "(i,j->i-1,i,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,i,j)");
#generateScheduledCode(prog, system, outDir+"/k_i_j");

# -k,i,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,i,j)", "(i,j->0,i,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,i,j)");
#generateScheduledCode(prog, system, outDir+"/-k_i_j");

# k,i,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,i,N-j)", "(i,j->i-1,i,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,i,N-j)");
#generateScheduledCode(prog, system, outDir+"/k_i_-j");

# -k,i,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,i,N-j)", "(i,j->0,i,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,i,N-j)");
#generateScheduledCode(prog, system, outDir+"/-k_i_-j");

# k,-i,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,N-i,j)", "(i,j->i-1,N-i,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,N-i,j)");
#generateScheduledCode(prog, system, outDir+"/k_-i_j");

# -k,-i,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,N-i,j)", "(i,j->0,N-i,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,N-i,j)");
#generateScheduledCode(prog, system, outDir+"/-k_-i_j");

# k,-i,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,N-i,N-j)", "(i,j->i-1,N-i,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,N-i,N-j)");
#generateScheduledCode(prog, system, outDir+"/k_-i_-j");

# -k,-i,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,N-i,N-j)", "(i,j->0,N-i,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,N-i,N-j)");
#generateScheduledCode(prog, system, outDir+"/-k_-i_-j");

# k,j,i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,j,i)", "(i,j->i-1,j,i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j,i)");
#generateScheduledCode(prog, system, outDir+"/k_j_i");

# -k,j,i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,j,i)", "(i,j->0,j,i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,j,i)");
#generateScheduledCode(prog, system, outDir+"/-k_j_i");

# k,-j,i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,N-j,i)", "(i,j->i-1,N-j,i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,N-j,i)");
#generateScheduledCode(prog, system, outDir+"/k_-j_i");

# -k,-j,i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,N-j,i)", "(i,j->0,N-j,i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,N-j,i)");
#generateScheduledCode(prog, system, outDir+"/-k_-j_i");

# k,j,-i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,j,N-i)", "(i,j->i-1,j,N-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j,N-i)");
#generateScheduledCode(prog, system, outDir+"/k_j_-i");

# -k,j,-i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,j,N-i)", "(i,j->0,j,N-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,j,N-i)");
#generateScheduledCode(prog, system, outDir+"/-k_j_-i");

# k,-j,-i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,N-j,N-i)", "(i,j->i-1,N-j,N-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,N-j,N-i)");
#generateScheduledCode(prog, system, outDir+"/k_-j_-i");

# -k,-j,-i
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,N-j,N-i)", "(i,j->0,N-j,N-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,N-j,N-i)");
#generateScheduledCode(prog, system, outDir+"/-k_-j_-i");

# d,j,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-i,j,k)", "(i,j->j-i,j,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i,j,j)");
#generateScheduledCode(prog, system, outDir+"/d_j_k");

# d,j,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-i,j,j-k)", "(i,j->j-i,j,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i,j,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/d_j_-k");

# d,-j,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-i,N-j,k)", "(i,j->j-i,N-j,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i,N-j,j)");
#generateScheduledCode(prog, system, outDir+"/d_-j_k");

# d,-j,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-i,N-j,j-k)", "(i,j->j-i,N-j,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i,N-j,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/d_-j_-k");

# d,k,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-i,k,j)", "(i,j->j-i,i-1,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i,j,j)");
#generateScheduledCode(prog, system, outDir+"/d_k_j");

# d,-k,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-i,j-k,j)", "(i,j->j-i,0,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i,j-i+1,j)");
#generateScheduledCode(prog, system, outDir+"/d_-k_j");

# d,k,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-i,k,N-j)", "(i,j->j-i,i-1,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i,j,N-j)");
#generateScheduledCode(prog, system, outDir+"/d_k_-j");

# d,-k,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-i,j-k,N-j)", "(i,j->j-i,0,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i,j-i+1,N-j)");
#generateScheduledCode(prog, system, outDir+"/d_-k_-j");

# j,d,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,j-i,k)", "(i,j->j,j-i,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j-i,j)");
#generateScheduledCode(prog, system, outDir+"/j_d_k");

# j,d,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,j-i,j-k)", "(i,j->j,j-i,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j-i,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/j_d_-k");

# -j,d,k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,j-i,k)", "(i,j->N-j,j-i,i-1)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,j-i,j)");
#generateScheduledCode(prog, system, outDir+"/-j_d_k");

# -j,d,-k
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,j-i,j-k)", "(i,j->N-j,j-i,0)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,j-i,j-i+1)");
#generateScheduledCode(prog, system, outDir+"/-j_d_-k");

# j,k,d
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,k,j-i)", "(i,j->j,i-1,j-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j,j-i)");
#generateScheduledCode(prog, system, outDir+"/j_k_d");

# j,-k,d
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j,j-k,j-i)", "(i,j->j,0,j-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j-i+1,j-i)");
#generateScheduledCode(prog, system, outDir+"/j_-k_d");

# -j,k,d
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,k,j-i)", "(i,j->N-j,i-1,j-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,j,j-i)");
#generateScheduledCode(prog, system, outDir+"/-j_k_d");

# -j,-k,d
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->N-j,j-k,j-i)", "(i,j->N-j,0,j-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->N-j,j-i+1,j-i)");
#generateScheduledCode(prog, system, outDir+"/-j_-k_d");

# k,d,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,j-i,j)", "(i,j->i-1,j-i,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j-i,j)");
#generateScheduledCode(prog, system, outDir+"/k_d_j");

# -k,d,j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,j-i,j)", "(i,j->0,j-i,j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,j-i,j)");
#generateScheduledCode(prog, system, outDir+"/-k_d_j");

# k,d,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,j-i,N-j)", "(i,j->i-1,j-i,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j-i,N-j)");
#generateScheduledCode(prog, system, outDir+"/k_d_-j");

# -k,d,-j
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,j-i,N-j)", "(i,j->0,j-i,N-j)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,j-i,N-j)");
#generateScheduledCode(prog, system, outDir+"/-k_d_-j");

# k,j,d
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,j,j-i)", "(i,j->i-1,j,j-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,j,j-i)");
#generateScheduledCode(prog, system, outDir+"/k_j_d");

# -k,j,d
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,j,j-i)", "(i,j->0,j,j-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,j,j-i)");
#generateScheduledCode(prog, system, outDir+"/-k_j_d");

# k,-j,d
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->k,N-j,j-i)", "(i,j->i-1,N-j,j-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j,N-j,j-i)");
#generateScheduledCode(prog, system, outDir+"/k_-j_d");

# -k,-j,d
#setSpaceTimeMap(prog, system, "Main", "(i,j,k->j-k,N-j,j-i)", "(i,j->0,N-j,j-i)");
#setSpaceTimeMap(prog, system, "C",    "(i,j->j-i+1,N-j,j-i)");
#generateScheduledCode(prog, system, outDir+"/-k_-j_d");

##################### Memory Consolidation #####################

#setMemorySpace(prog, system, "C", "C, Main");
#generateScheduledCode(prog, system, outDir+"/memSpace"); # Default maping, (i,j -> i,j), does NOT work.

#AShow(prog, system);

#generateVerificationCode(prog, system, outDir);
#generateWriteC(prog, system, outDir);
#generateWrapper(prog, system, outDir);
#generateMakefile(prog, system, outDir);
#generateScheduledCode(prog, system, outDir);
