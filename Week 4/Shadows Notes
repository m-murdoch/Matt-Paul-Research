Shadows: Computes which points in a series of sequential heights are in the sun

Program Parameter: N, the size of the array of points. Must be greater than 0.

Inputs:
  A: An array of floats that represent the heights of equally distributed points of size N
  T: The product of the tangent of the angle of the sun and the distance between the points
   
    Example Inputs: A(0) = 2, A(1) = 3, A(2) = 4, A(3) = 2, A(4) = 3, T = 1 (This might be a 45° angle and distance of 1)

Output:
S: An array of bools that indicate whether each point is in the sun or not, also size N. True = in sun, False = in shadow. 
    
    Example Outpus: S(0) = 1, S(1) = 1, S(2) = 1, S(3) = 0, S(4) = 1

Computational Complexity:
The program runs in N(N-1)/2+1 time. As the first element of A is always true, and elements only need to be compared to elements to their left.

Potential Optimizations:
•	Keeping a max height, any value greater than or equal to the max would be in the sun. This would be a constant time check that could reduce the average time but would not affect the worst-case time (big O).
•	Begin by checking for shadows from i-1 to 0. If the element being checked (j) is not tall enough to cast a shadow on i than check whether j is in the sun (S(j) = true), at this point all elements of S from 0 to i-1 have been evaluated. If S(j) = true than S(i) = true. Again, this does not affect the worst-case time, only the average case. 
